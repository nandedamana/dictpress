{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dictpress is a free and open source, single binary webserver application for building and publishing fast, searchable, dictionaries for any language. See the Olam and Alar dictionaries for example.","title":"Introduction"},{"location":"admin/","text":"The admin UI is accessible at http://localhost:9000/admin . Replace the hostname and port with your installation.","title":"Admin UI"},{"location":"data-structure/","text":"Data structure \u00b6 dictpress is language agnostic and has no concept of language semantics. It stores all data in a Postgres database in just two tables entries and relations. To make a universal dictionary interface possible, it treats all dictionary entries as UTF-8 strings that can be accurately searched with Postgres DB's fulltext capabilities by storing tsvector tokens alongside them. The tokens that encode and make the entries searchable can be anything\u2014simple stemmed words or phonetic hashes like Metaphone. Postgres comes with built-in tokenizers for two dozen languages (\\dFd to see the full list on psql). There can be any number of languages defined in the dictionary. eg: 'english', 'malayalam', 'kannada' etc. All content, the entry words and their definitions, are stored in the entries table Entry-definition many-to-many relationships are stored in the relations table, represented by from_id (entry word) -> to_id (definition word), where both IDs refer to the entries table. Database tables \u00b6 entries \u00b6 Field Type id SERIAL Automtaically generated numeric ID used internally guid TEXT Automtaically generated unique id (UUID) used in public facing APIs content TEXT Actual language content. Dictionary word or definition entries initial TEXT The first \"alphabet\" of the content. For English, for the word Apple , the initial is A weight INT An optional numeric value to sort search results in ascending order tokens TSVECTOR Fulltext search tokens. For English, Postgres' built-in tokenizer gives to_tsvector('fully conditioned') = 'condit':2 'fulli':1 types TEXT[] Types of content as defined in the content. Eg {noun, propernoun} tags TEXT[] Optional tags phones TEXT[] Phonetic (pronunciation) descriptions of the content. Eg: {ap(\u0259)l, aapl} for Apple notes TEXT Optional additional textual description of the content. status ENUM enabled (show the entry in search results), disabled (hide from search results), pending (public submission pending moderator review) relations \u00b6 Field Type from_id INT ID of the head word or the dictionary entry in the entries table to_id INT ID of the definition content in the entry table types TEXT[] Types defining the definition as defined in the config. Eg {noun, propernoun} weight INT An optional numeric value to order definition results tags TEXT[] Optional tags status ENUM enabled (show the entry in search results), disabled (hide from search results), pending (public submission pending moderator review) notes TEXT Optional additional textual description of the content.","title":"Data structure"},{"location":"data-structure/#data-structure","text":"dictpress is language agnostic and has no concept of language semantics. It stores all data in a Postgres database in just two tables entries and relations. To make a universal dictionary interface possible, it treats all dictionary entries as UTF-8 strings that can be accurately searched with Postgres DB's fulltext capabilities by storing tsvector tokens alongside them. The tokens that encode and make the entries searchable can be anything\u2014simple stemmed words or phonetic hashes like Metaphone. Postgres comes with built-in tokenizers for two dozen languages (\\dFd to see the full list on psql). There can be any number of languages defined in the dictionary. eg: 'english', 'malayalam', 'kannada' etc. All content, the entry words and their definitions, are stored in the entries table Entry-definition many-to-many relationships are stored in the relations table, represented by from_id (entry word) -> to_id (definition word), where both IDs refer to the entries table.","title":"Data structure"},{"location":"data-structure/#database-tables","text":"","title":"Database tables"},{"location":"data-structure/#entries","text":"Field Type id SERIAL Automtaically generated numeric ID used internally guid TEXT Automtaically generated unique id (UUID) used in public facing APIs content TEXT Actual language content. Dictionary word or definition entries initial TEXT The first \"alphabet\" of the content. For English, for the word Apple , the initial is A weight INT An optional numeric value to sort search results in ascending order tokens TSVECTOR Fulltext search tokens. For English, Postgres' built-in tokenizer gives to_tsvector('fully conditioned') = 'condit':2 'fulli':1 types TEXT[] Types of content as defined in the content. Eg {noun, propernoun} tags TEXT[] Optional tags phones TEXT[] Phonetic (pronunciation) descriptions of the content. Eg: {ap(\u0259)l, aapl} for Apple notes TEXT Optional additional textual description of the content. status ENUM enabled (show the entry in search results), disabled (hide from search results), pending (public submission pending moderator review)","title":"entries"},{"location":"data-structure/#relations","text":"Field Type from_id INT ID of the head word or the dictionary entry in the entries table to_id INT ID of the definition content in the entry table types TEXT[] Types defining the definition as defined in the config. Eg {noun, propernoun} weight INT An optional numeric value to order definition results tags TEXT[] Optional tags status ENUM enabled (show the entry in search results), disabled (hide from search results), pending (public submission pending moderator review) notes TEXT Optional additional textual description of the content.","title":"relations"},{"location":"import/","text":"dictpress comes with a built in CSV to database importer tool. Once dictionary data has been organised into the below described structure, import it by running ./dictpress --import=yourfile.csv . Entries with the same content in the same language are not inserted into the database multiple times, but are instead re-used. For instance, if there are multiple Apple (English) entries, it is inserted once but re-used in multiple relations. Sample CSV format \u00b6 -,A,Apple,english,Optional note,english,\"\",optional-tag1|tag2,\"\u02c8\u00e6p.\u0259l|aapl\",\"\" ^,\"\",\"round, red or yellow, edible fruit of a small tree\",english,\"\",\"\",\"\",\"\",\"\",noun ^,\"\",\"the tree, cultivated in most temperate regions.\",english,\"\",\"\",\"\",\"\",\"\",noun ^,\"\",\"il pomo.\",italian,\"\",\"\",\"\",\"\",\"\",sost -,A,Application,english,Optional note,italian,\"\",\"\",\"apl\u026a\u02c8ke\u026a\u0283(\u0259)n\",\"\" ^,\"\",\"the act of putting to a special use or purpose\",english,\"\",\"\",\"\",\"\",\"\",noun ^,\"\",\"le applicazione\",italian,\"\",\"\",\"\",\"\",\"\",sost Every line in the CSV file contains an entry in a given language described in 10 columns. Each entry is either a main entry in the dictionary, or a definition of another entry. This is indicated by the first column in each line. - represents a main entry and all subsequent entries below it marked with ^ represents its definitions in one or more languages. The above example shows two main English entries, \"Apple\" and \"Application\" with multiple English and Italian definitions below them. CSV fields \u00b6 Column Field 0 type - represents a main entry. ^ under it represents a definition entry. 1 initial The uppercase first character of the entry. Eg: A for Apple. If left empty, it is automatically picked up. 2 content The entry content (word or phrase). 3 language Language of the entry (as defined in the config). 4 notes Optional notes describing the entry. 5 tsvector_language If the language has a built in Postgres fulltext tokenizer, the name of the tokenizer language. For languages that do not have Postgres tokenizers, this should be empty. 6 tsVector_tokens Postgres fulltext search tokens for the entry (Content). If tsvector_language is specified, this field can be left empty as the tokens are automatically created in the database using TO_TSVECTOR($tsvector_language, $content) . For languages without Postgres tokenizers, the tsvector token string should be computed externally and provided here. 7 tags Optional tags describing the entry. Separate multiple tags by \\| . 8 phones Optional phonetic notations representing the pronunciations of the entry. Separate multiple phones by \\| . 9 definition-types This should only be set for definition entries that ar marked with Type = ^ . One or more parts-of-speech types separated by \\| . Example noun\\|verb . Importing with SQL \u00b6 Generating SQL for dictionary data and loading that directly into the database can give fine grained control The following is the SQL equivalent of the above CSV. The Postgres database tables schemas are described here . -- If the DB is not empty, to wipe everything and get a clean slate, run: -- TRUNCATE TABLE entries RESTART IDENTITY CASCADE; TRUNCATE TABLE relations RESTART IDENTITY CASCADE; -- Insert head words apple, application (id=1, 2) INSERT INTO entries ( lang , content , initial , tokens , phones ) VALUES ( 'english' , 'Apple' , 'A' , TO_TSVECTOR ( 'apple' ), '{/\u02c8\u00e6p.\u0259l/, aapl}' ), ( 'english' , 'Application' , 'A' , TO_TSVECTOR ( 'application' ), '{/apl\u026a\u02c8ke\u026a\u0283(\u0259)n/}' ); -- Insert English definitions for apple. (id=3, 4, 5) INSERT INTO entries ( lang , content ) VALUES ( 'english' , 'round, red or yellow, edible fruit of a small tree' ), ( 'english' , 'the tree, cultivated in most temperate regions.' ), ( 'english' , 'anything resembling an apple in size and shape, as a ball, especially a baseball.' ); -- Insert English apple-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 1 , 3 , '{noun}' , 0 ), ( 1 , 4 , '{noun}' , 1 ), ( 1 , 5 , '{noun}' , 2 ); -- Insert Italian definitions for apple. (id=6, 7) INSERT INTO entries ( lang , content ) VALUES ( 'italian' , 'mela' ), ( 'italian' , 'il pomo.' ); -- Insert Italian apple-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 1 , 6 , '{noun}' , 0 ), ( 1 , 7 , '{noun}' , 1 ); -- -- Insert English definitions for application. (id=8, 9) INSERT INTO entries ( lang , content ) VALUES ( 'english' , 'the act of putting to a special use or purpose' ), ( 'english' , 'the act of requesting.' ); -- Insert English application-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 2 , 3 , '{noun}' , 8 ), ( 2 , 4 , '{noun}' , 9 ); -- Insert Italian definitions for application. (id=10, 11, 12) INSERT INTO entries ( lang , content ) VALUES ( 'italian' , 'le applicazione' ), ( 'italian' , 'la domanda' ), ( 'italian' , 'la richiesta' ); -- Insert Italian application-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 2 , 10 , '{noun}' , 0 ), ( 2 , 11 , '{noun}' , 1 ), ( 2 , 12 , '{noun}' , 1 );","title":"Importing data"},{"location":"import/#sample-csv-format","text":"-,A,Apple,english,Optional note,english,\"\",optional-tag1|tag2,\"\u02c8\u00e6p.\u0259l|aapl\",\"\" ^,\"\",\"round, red or yellow, edible fruit of a small tree\",english,\"\",\"\",\"\",\"\",\"\",noun ^,\"\",\"the tree, cultivated in most temperate regions.\",english,\"\",\"\",\"\",\"\",\"\",noun ^,\"\",\"il pomo.\",italian,\"\",\"\",\"\",\"\",\"\",sost -,A,Application,english,Optional note,italian,\"\",\"\",\"apl\u026a\u02c8ke\u026a\u0283(\u0259)n\",\"\" ^,\"\",\"the act of putting to a special use or purpose\",english,\"\",\"\",\"\",\"\",\"\",noun ^,\"\",\"le applicazione\",italian,\"\",\"\",\"\",\"\",\"\",sost Every line in the CSV file contains an entry in a given language described in 10 columns. Each entry is either a main entry in the dictionary, or a definition of another entry. This is indicated by the first column in each line. - represents a main entry and all subsequent entries below it marked with ^ represents its definitions in one or more languages. The above example shows two main English entries, \"Apple\" and \"Application\" with multiple English and Italian definitions below them.","title":"Sample CSV format"},{"location":"import/#csv-fields","text":"Column Field 0 type - represents a main entry. ^ under it represents a definition entry. 1 initial The uppercase first character of the entry. Eg: A for Apple. If left empty, it is automatically picked up. 2 content The entry content (word or phrase). 3 language Language of the entry (as defined in the config). 4 notes Optional notes describing the entry. 5 tsvector_language If the language has a built in Postgres fulltext tokenizer, the name of the tokenizer language. For languages that do not have Postgres tokenizers, this should be empty. 6 tsVector_tokens Postgres fulltext search tokens for the entry (Content). If tsvector_language is specified, this field can be left empty as the tokens are automatically created in the database using TO_TSVECTOR($tsvector_language, $content) . For languages without Postgres tokenizers, the tsvector token string should be computed externally and provided here. 7 tags Optional tags describing the entry. Separate multiple tags by \\| . 8 phones Optional phonetic notations representing the pronunciations of the entry. Separate multiple phones by \\| . 9 definition-types This should only be set for definition entries that ar marked with Type = ^ . One or more parts-of-speech types separated by \\| . Example noun\\|verb .","title":"CSV fields"},{"location":"import/#importing-with-sql","text":"Generating SQL for dictionary data and loading that directly into the database can give fine grained control The following is the SQL equivalent of the above CSV. The Postgres database tables schemas are described here . -- If the DB is not empty, to wipe everything and get a clean slate, run: -- TRUNCATE TABLE entries RESTART IDENTITY CASCADE; TRUNCATE TABLE relations RESTART IDENTITY CASCADE; -- Insert head words apple, application (id=1, 2) INSERT INTO entries ( lang , content , initial , tokens , phones ) VALUES ( 'english' , 'Apple' , 'A' , TO_TSVECTOR ( 'apple' ), '{/\u02c8\u00e6p.\u0259l/, aapl}' ), ( 'english' , 'Application' , 'A' , TO_TSVECTOR ( 'application' ), '{/apl\u026a\u02c8ke\u026a\u0283(\u0259)n/}' ); -- Insert English definitions for apple. (id=3, 4, 5) INSERT INTO entries ( lang , content ) VALUES ( 'english' , 'round, red or yellow, edible fruit of a small tree' ), ( 'english' , 'the tree, cultivated in most temperate regions.' ), ( 'english' , 'anything resembling an apple in size and shape, as a ball, especially a baseball.' ); -- Insert English apple-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 1 , 3 , '{noun}' , 0 ), ( 1 , 4 , '{noun}' , 1 ), ( 1 , 5 , '{noun}' , 2 ); -- Insert Italian definitions for apple. (id=6, 7) INSERT INTO entries ( lang , content ) VALUES ( 'italian' , 'mela' ), ( 'italian' , 'il pomo.' ); -- Insert Italian apple-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 1 , 6 , '{noun}' , 0 ), ( 1 , 7 , '{noun}' , 1 ); -- -- Insert English definitions for application. (id=8, 9) INSERT INTO entries ( lang , content ) VALUES ( 'english' , 'the act of putting to a special use or purpose' ), ( 'english' , 'the act of requesting.' ); -- Insert English application-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 2 , 3 , '{noun}' , 8 ), ( 2 , 4 , '{noun}' , 9 ); -- Insert Italian definitions for application. (id=10, 11, 12) INSERT INTO entries ( lang , content ) VALUES ( 'italian' , 'le applicazione' ), ( 'italian' , 'la domanda' ), ( 'italian' , 'la richiesta' ); -- Insert Italian application-definition relationships. INSERT INTO relations ( from_id , to_id , types , weight ) VALUES ( 2 , 10 , '{noun}' , 0 ), ( 2 , 11 , '{noun}' , 1 ), ( 2 , 12 , '{noun}' , 1 );","title":"Importing with SQL"},{"location":"installation/","text":"Installation \u00b6 dictpress requires Postgres \u2a7e v10. Binary \u00b6 Download the latest release and extract the binary. ./dictpress --new-config to generate config.toml. Then, edit the file. ./dictpress --install to install the tables in the Postgres DB. Run ./dictpress and visit http://localhost:9000/admin . See Importing data to populate the dictionary database from CSVs. Compiling from source \u00b6 To compile the latest unreleased version ( master branch): Make sure go , nodejs , and yarn are installed on your system. git clone git@github.com:knadh/dictpress.git cd dictpress && make dist . This will generate the dictpress binary.","title":"Installation"},{"location":"installation/#installation","text":"dictpress requires Postgres \u2a7e v10.","title":"Installation"},{"location":"installation/#binary","text":"Download the latest release and extract the binary. ./dictpress --new-config to generate config.toml. Then, edit the file. ./dictpress --install to install the tables in the Postgres DB. Run ./dictpress and visit http://localhost:9000/admin . See Importing data to populate the dictionary database from CSVs.","title":"Binary"},{"location":"installation/#compiling-from-source","text":"To compile the latest unreleased version ( master branch): Make sure go , nodejs , and yarn are installed on your system. git clone git@github.com:knadh/dictpress.git cd dictpress && make dist . This will generate the dictpress binary.","title":"Compiling from source"},{"location":"templates/","text":"dictpress supports publishing dictionary websites with site themes or templates. Examples: Alar \u2014 Kannada-English dictionary. Olam \u2014 English-Malayalam, Malayalam-Malayalam dictionary. To setup a dictionary website, use the default theme shipped along with the latest release in the site directory. When running the dictpress binary, pass the path to the directory to it with the --site flag. ./dictpress --site = ./site The site will be served on the port set in the configuration file. eg: http://localhost:9000 . To customize the site, edit the template files in the site directory.","title":"Templates"},{"location":"api/config/","text":"Config \u00b6 GET /api/config \u00b6 Retrieve the dictionary configuration Request \u00b6 curl http://localhost:9000/api/config Response { \"data\" : { \"root_url\" : \"http://localhost:9000\" , \"languages\" : { \"english\" : { \"name\" : \"English\" , \"types\" : { \"abbr\" : \"Abbreviation\" , \"adj\" : \"Adjective\" , \"adv\" : \"Adverb\" , \"auxv\" : \"Auxiliary verb\" , \"conj\" : \"Conjugation\" , \"idm\" : \"Idiom\" , \"interj\" : \"Interjection\" , \"noun\" : \"Noun\" , \"pfx\" : \"Prefix\" , \"ph\" : \"Phrase\" , \"phrv\" : \"Phrasal verb\" , \"prep\" : \"Preposition\" , \"pron\" : \"Pronoun\" , \"propn\" : \"Proper Noun\" , \"sfx\" : \"Suffix\" , \"verb\" : \"Verb\" }, \"tokenizer\" : \"english\" , \"tokenizer_type\" : \"postgres\" }, \"italian\" : { \"name\" : \"Italian\" , \"types\" : { \"adj\" : \"Adjective\" , \"noun\" : \"Noun\" , \"verb\" : \"Verb\" }, \"tokenizer\" : \"italian\" , \"tokenizer_type\" : \"postgres\" }, \"kannada\" : { \"name\" : \"Kannada\" , \"types\" : { \"adj\" : \"Adjective\" , \"noun\" : \"Noun\" , \"verb\" : \"Verb\" }, \"tokenizer\" : \"indicphone\" , \"tokenizer_type\" : \"custom\" } }, \"version\" : \"v0.3.0\" , \"build\" : \"v0.3.0 (#38a1927 2022-06-26T07:56:05+0000)\" } }","title":"Config"},{"location":"api/config/#config","text":"","title":"Config"},{"location":"api/config/#get-apiconfig","text":"Retrieve the dictionary configuration","title":"GET /api/config"},{"location":"api/config/#request","text":"curl http://localhost:9000/api/config Response { \"data\" : { \"root_url\" : \"http://localhost:9000\" , \"languages\" : { \"english\" : { \"name\" : \"English\" , \"types\" : { \"abbr\" : \"Abbreviation\" , \"adj\" : \"Adjective\" , \"adv\" : \"Adverb\" , \"auxv\" : \"Auxiliary verb\" , \"conj\" : \"Conjugation\" , \"idm\" : \"Idiom\" , \"interj\" : \"Interjection\" , \"noun\" : \"Noun\" , \"pfx\" : \"Prefix\" , \"ph\" : \"Phrase\" , \"phrv\" : \"Phrasal verb\" , \"prep\" : \"Preposition\" , \"pron\" : \"Pronoun\" , \"propn\" : \"Proper Noun\" , \"sfx\" : \"Suffix\" , \"verb\" : \"Verb\" }, \"tokenizer\" : \"english\" , \"tokenizer_type\" : \"postgres\" }, \"italian\" : { \"name\" : \"Italian\" , \"types\" : { \"adj\" : \"Adjective\" , \"noun\" : \"Noun\" , \"verb\" : \"Verb\" }, \"tokenizer\" : \"italian\" , \"tokenizer_type\" : \"postgres\" }, \"kannada\" : { \"name\" : \"Kannada\" , \"types\" : { \"adj\" : \"Adjective\" , \"noun\" : \"Noun\" , \"verb\" : \"Verb\" }, \"tokenizer\" : \"indicphone\" , \"tokenizer_type\" : \"custom\" } }, \"version\" : \"v0.3.0\" , \"build\" : \"v0.3.0 (#38a1927 2022-06-26T07:56:05+0000)\" } }","title":"Request"},{"location":"api/entries/","text":"Entries \u00b6 GET /api/entries/:fromLang/:toLang/:searchQuery \u00b6 Search the dictionary and retrieve paginated results. :searchQuery should be URL encoded. This is identication to the public API /api/dictionary/:fromLang/:toLang/:searchQuery except that the public API does not return numerical database id s of entries. Request \u00b6 curl http://localhost:9000/api/dictionary/english/english/apple Response { \"data\" : { \"entries\" : [ { \"id\" : 1 , \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"relations\" : [ { \"id\" : 3 , \"guid\" : \"61f76f4d-ee87-4efc-b2b2-845125585bcf\" , \"weight\" : 0 , \"initial\" : \"R\" , \"lang\" : \"english\" , \"content\" : \"round, red or yellow, edible fruit of a small tree\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 1 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 0 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 4 , \"guid\" : \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\" , \"weight\" : 1 , \"initial\" : \"T\" , \"lang\" : \"english\" , \"content\" : \"the tree, cultivated in most temperate regions.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 2 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 1 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 5 , \"guid\" : \"653fc521-f917-4049-99fc-5281b3e2e300\" , \"weight\" : 2 , \"initial\" : \"I\" , \"lang\" : \"italian\" , \"content\" : \"il pomo.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 3 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 2 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } } ], \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } ], \"page\" : 1 , \"per_page\" : 10 , \"total_pages\" : 0 , \"total\" : 1 } } Query params \u00b6 Param Type type string Filter results by the given type. eg: noun . tag string Filter results by the given tag. eg: my-tag . per_page int Number of results to return per page (query) page int Page number for paginated results. GET /api/entries/:id \u00b6 Retrieve a single entry by its database ID. Request \u00b6 curl -u username:password http://localhost:9000/api/entries/1 Response { \"data\" : { \"id\" : 1 , \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"relations\" : [ { \"id\" : 3 , \"guid\" : \"61f76f4d-ee87-4efc-b2b2-845125585bcf\" , \"weight\" : 0 , \"initial\" : \"R\" , \"lang\" : \"english\" , \"content\" : \"round, red or yellow, edible fruit of a small tree\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 1 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 0 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 4 , \"guid\" : \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\" , \"weight\" : 1 , \"initial\" : \"T\" , \"lang\" : \"english\" , \"content\" : \"the tree, cultivated in most temperate regions.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 2 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 1 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 5 , \"guid\" : \"653fc521-f917-4049-99fc-5281b3e2e300\" , \"weight\" : 2 , \"initial\" : \"I\" , \"lang\" : \"italian\" , \"content\" : \"il pomo.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 3 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 2 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } } ], \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } } GET /api/entries/:id/parents \u00b6 Retrieve all parent entries of a definition entry. Request \u00b6 curl -u username:password http://localhost:9000/api/entries/3/parents Response { \"data\" : [ { \"id\" : 1 , \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } ] } POST /api/entries \u00b6 Create a new entry in the database. This can be a main entry or a definition entry which can be added to another main entry later. Request \u00b6 curl -u username:password 'http://localhost:9000/api/entries' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"content\": \"Apple\", \"initial\": \"A\", \"lang\": \"english\", \"phones\": [\"aapl\"], \"tags\": [\"my-tag\"], \"tokens\": \"my-tag\", \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : { \"id\" : 8 , \"guid\" : \"fa19911a-06a8-424b-8ca3-256e5511cd1f\" , \"weight\" : 2 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"my-tag\" ], \"phones\" : [ \"aapl\" ], \"notes\" : \"Optional notes\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T09:45:21.011192Z\" , \"updated_at\" : \"2022-06-26T09:45:21.011192Z\" } } Params \u00b6 Param Type content string The entry content (word or phrase). initial string The uppercase first character of the entry. Eg: A for Apple. If left empty, it is automatically picked up. lang string Language of the entry as defined in the config. phones []string Optional phonetic notations representing the pronunciations of the entry. tokens string Postgres fulltext search tokens for the entry (content). If this is left empty and the language config has tokenizer_type set as Postgres , the tokens are automatically created in the database using TO_TSVECTOR($tsvector_language, $content) . For languages without Postgres tokenizers, the tsvector token string should be computed externally and provided here. tags []string Optional tags describing the entry. notes string Optional notes describing the entry. weight int Optional numerical weight to order the entry in the glossary and search results. If left empty, it is automatically computed as the last entry by the initial in ascending order. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs. PUT /api/entries/:id \u00b6 Update an entry. Request \u00b6 curl -u username:password 'http://localhost:9000/api/entries/8' -X PUT \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"content\": \"Apple\", \"initial\": \"A\", \"lang\": \"english\", \"phones\": [\"aapl\"], \"tags\": [\"my-tag\"], \"tokens\": \"my-tag\", \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : { \"id\" : 8 , \"guid\" : \"fa19911a-06a8-424b-8ca3-256e5511cd1f\" , \"weight\" : 2 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"my-tag\" ], \"phones\" : [ \"aapl\" ], \"notes\" : \"Optional notes\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T09:45:21.011192Z\" , \"updated_at\" : \"2022-06-26T09:45:21.011192Z\" } } Params \u00b6 Param Type content string The entry content (word or phrase). initial string The uppercase first character of the entry. Eg: A for Apple. If left empty, it is automatically picked up. lang string Language of the entry as defined in the config. phones []string Optional phonetic notations representing the pronunciations of the entry. tokens string Postgres fulltext search tokens for the entry (content). If this is left empty and the language config has tokenizer_type set as Postgres , the tokens are automatically created in the database using TO_TSVECTOR($TSVectorLanguage, $content) . For languages without Postgres tokenizers, the TSVectorToken strings should be computed externally and added here. tags []string Optional tags describing the entry. notes string Optional notes describing the entry. weight int Optional numerical weight to order the entry in the glossary and search results. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs. DELETE /api/entries/:id \u00b6 Delete an entry. If this is a main entry, its definition entries are not removed, but merely unlinked from the relations table. Request \u00b6 curl -u username:password 'http://localhost:9000/api/entries/1' -X DELETE Response { \"data\" : true }","title":"Entries"},{"location":"api/entries/#entries","text":"","title":"Entries"},{"location":"api/entries/#get-apientriesfromlangtolangsearchquery","text":"Search the dictionary and retrieve paginated results. :searchQuery should be URL encoded. This is identication to the public API /api/dictionary/:fromLang/:toLang/:searchQuery except that the public API does not return numerical database id s of entries.","title":"GET /api/entries/:fromLang/:toLang/:searchQuery"},{"location":"api/entries/#request","text":"curl http://localhost:9000/api/dictionary/english/english/apple Response { \"data\" : { \"entries\" : [ { \"id\" : 1 , \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"relations\" : [ { \"id\" : 3 , \"guid\" : \"61f76f4d-ee87-4efc-b2b2-845125585bcf\" , \"weight\" : 0 , \"initial\" : \"R\" , \"lang\" : \"english\" , \"content\" : \"round, red or yellow, edible fruit of a small tree\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 1 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 0 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 4 , \"guid\" : \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\" , \"weight\" : 1 , \"initial\" : \"T\" , \"lang\" : \"english\" , \"content\" : \"the tree, cultivated in most temperate regions.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 2 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 1 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 5 , \"guid\" : \"653fc521-f917-4049-99fc-5281b3e2e300\" , \"weight\" : 2 , \"initial\" : \"I\" , \"lang\" : \"italian\" , \"content\" : \"il pomo.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 3 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 2 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } } ], \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } ], \"page\" : 1 , \"per_page\" : 10 , \"total_pages\" : 0 , \"total\" : 1 } }","title":"Request"},{"location":"api/entries/#query-params","text":"Param Type type string Filter results by the given type. eg: noun . tag string Filter results by the given tag. eg: my-tag . per_page int Number of results to return per page (query) page int Page number for paginated results.","title":"Query params"},{"location":"api/entries/#get-apientriesid","text":"Retrieve a single entry by its database ID.","title":"GET /api/entries/:id"},{"location":"api/entries/#request_1","text":"curl -u username:password http://localhost:9000/api/entries/1 Response { \"data\" : { \"id\" : 1 , \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"relations\" : [ { \"id\" : 3 , \"guid\" : \"61f76f4d-ee87-4efc-b2b2-845125585bcf\" , \"weight\" : 0 , \"initial\" : \"R\" , \"lang\" : \"english\" , \"content\" : \"round, red or yellow, edible fruit of a small tree\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 1 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 0 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 4 , \"guid\" : \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\" , \"weight\" : 1 , \"initial\" : \"T\" , \"lang\" : \"english\" , \"content\" : \"the tree, cultivated in most temperate regions.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 2 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 1 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"id\" : 5 , \"guid\" : \"653fc521-f917-4049-99fc-5281b3e2e300\" , \"weight\" : 2 , \"initial\" : \"I\" , \"lang\" : \"italian\" , \"content\" : \"il pomo.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"id\" : 3 , \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 2 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } } ], \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } }","title":"Request"},{"location":"api/entries/#get-apientriesidparents","text":"Retrieve all parent entries of a definition entry.","title":"GET /api/entries/:id/parents"},{"location":"api/entries/#request_2","text":"curl -u username:password http://localhost:9000/api/entries/3/parents Response { \"data\" : [ { \"id\" : 1 , \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } ] }","title":"Request"},{"location":"api/entries/#post-apientries","text":"Create a new entry in the database. This can be a main entry or a definition entry which can be added to another main entry later.","title":"POST /api/entries"},{"location":"api/entries/#request_3","text":"curl -u username:password 'http://localhost:9000/api/entries' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"content\": \"Apple\", \"initial\": \"A\", \"lang\": \"english\", \"phones\": [\"aapl\"], \"tags\": [\"my-tag\"], \"tokens\": \"my-tag\", \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : { \"id\" : 8 , \"guid\" : \"fa19911a-06a8-424b-8ca3-256e5511cd1f\" , \"weight\" : 2 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"my-tag\" ], \"phones\" : [ \"aapl\" ], \"notes\" : \"Optional notes\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T09:45:21.011192Z\" , \"updated_at\" : \"2022-06-26T09:45:21.011192Z\" } }","title":"Request"},{"location":"api/entries/#params","text":"Param Type content string The entry content (word or phrase). initial string The uppercase first character of the entry. Eg: A for Apple. If left empty, it is automatically picked up. lang string Language of the entry as defined in the config. phones []string Optional phonetic notations representing the pronunciations of the entry. tokens string Postgres fulltext search tokens for the entry (content). If this is left empty and the language config has tokenizer_type set as Postgres , the tokens are automatically created in the database using TO_TSVECTOR($tsvector_language, $content) . For languages without Postgres tokenizers, the tsvector token string should be computed externally and provided here. tags []string Optional tags describing the entry. notes string Optional notes describing the entry. weight int Optional numerical weight to order the entry in the glossary and search results. If left empty, it is automatically computed as the last entry by the initial in ascending order. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs.","title":"Params"},{"location":"api/entries/#put-apientriesid","text":"Update an entry.","title":"PUT /api/entries/:id"},{"location":"api/entries/#request_4","text":"curl -u username:password 'http://localhost:9000/api/entries/8' -X PUT \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"content\": \"Apple\", \"initial\": \"A\", \"lang\": \"english\", \"phones\": [\"aapl\"], \"tags\": [\"my-tag\"], \"tokens\": \"my-tag\", \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : { \"id\" : 8 , \"guid\" : \"fa19911a-06a8-424b-8ca3-256e5511cd1f\" , \"weight\" : 2 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"my-tag\" ], \"phones\" : [ \"aapl\" ], \"notes\" : \"Optional notes\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T09:45:21.011192Z\" , \"updated_at\" : \"2022-06-26T09:45:21.011192Z\" } }","title":"Request"},{"location":"api/entries/#params_1","text":"Param Type content string The entry content (word or phrase). initial string The uppercase first character of the entry. Eg: A for Apple. If left empty, it is automatically picked up. lang string Language of the entry as defined in the config. phones []string Optional phonetic notations representing the pronunciations of the entry. tokens string Postgres fulltext search tokens for the entry (content). If this is left empty and the language config has tokenizer_type set as Postgres , the tokens are automatically created in the database using TO_TSVECTOR($TSVectorLanguage, $content) . For languages without Postgres tokenizers, the TSVectorToken strings should be computed externally and added here. tags []string Optional tags describing the entry. notes string Optional notes describing the entry. weight int Optional numerical weight to order the entry in the glossary and search results. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs.","title":"Params"},{"location":"api/entries/#delete-apientriesid","text":"Delete an entry. If this is a main entry, its definition entries are not removed, but merely unlinked from the relations table.","title":"DELETE /api/entries/:id"},{"location":"api/entries/#request_5","text":"curl -u username:password 'http://localhost:9000/api/entries/1' -X DELETE Response { \"data\" : true }","title":"Request"},{"location":"api/intro-private/","text":"Private APIs require HTTP BasicAuth authentication with the username and password defined in the config file. Example: curl -u username:password http://localhost:9000/api/stats","title":"Introduction"},{"location":"api/intro/","text":"Public APIs do not require authentication.","title":"Intro"},{"location":"api/relations/","text":"POST /api/entries/:fromID/relations/:toID \u00b6 Adds a relation from an entry to another entry, making fromID entry the main entry and toID entry its definition. Request \u00b6 curl -u username:password 'http://localhost:9000/api/entries/1/relations/3' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"types\": [\"noun\"], \"tags\": [\"my-tag\"], \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : true } Params \u00b6 Param Type types []string One or more parts-of-speech types that describe the definition's (toID) relationship with the main entry. Example noun\\|verb . tags []string Optional tags describing the relationship (definition). notes string Optional notes describing the relationship (definition). weight int Optional numerical weight to order the definition. If left empty, the definition is added to the end of any existing definitions. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs. PUT /api/entries/:id/relations/:relationID \u00b6 Updates the properties of a relation between a main entry and a definition entry. :relationID is the ID of the relation row in the relations table. This is available in the GET /entries/:id API for all relations of an entry. Request \u00b6 curl -u username:password 'http://localhost:9000/api/entries/1/relations/:relationID' -X PUT \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"types\": [\"noun\"], \"tags\": [\"my-tag\"], \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : true } Params \u00b6 Param Type types []string One or more parts-of-speech types that describe the definition's (toID) relationship with the main entry. Example noun\\|verb . tags []string Optional tags describing the relationship (definition). notes string Optional notes describing the relationship (definition). weight int Optional numerical weight to order the definition. If left empty, the definition is added to the end of any existing definitions. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs. PUT /api/entries/:id/relations/weghts \u00b6 Re-order the relations (definition entries) of a main entry Request \u00b6 curl -u username:password 'http://localhost:9000/api/entries/1/relations/weights' -X PUT \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-raw '[3, 4, 5]' Response { \"data\" : true } Params \u00b6 Raw list of relation IDs in the desired order. DELETE /api/entries/:fromID/relations/:toID \u00b6 Delete a relation between two entries. This removes the :toID as a definition from the :fromID main entry. Request \u00b6 curl -u username:password 'http://localhost:9000/api/entries/1/relations/3' -X DELETE Response { \"data\" : true }","title":"Relations"},{"location":"api/relations/#post-apientriesfromidrelationstoid","text":"Adds a relation from an entry to another entry, making fromID entry the main entry and toID entry its definition.","title":"POST /api/entries/:fromID/relations/:toID"},{"location":"api/relations/#request","text":"curl -u username:password 'http://localhost:9000/api/entries/1/relations/3' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"types\": [\"noun\"], \"tags\": [\"my-tag\"], \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : true }","title":"Request"},{"location":"api/relations/#params","text":"Param Type types []string One or more parts-of-speech types that describe the definition's (toID) relationship with the main entry. Example noun\\|verb . tags []string Optional tags describing the relationship (definition). notes string Optional notes describing the relationship (definition). weight int Optional numerical weight to order the definition. If left empty, the definition is added to the end of any existing definitions. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs.","title":"Params"},{"location":"api/relations/#put-apientriesidrelationsrelationid","text":"Updates the properties of a relation between a main entry and a definition entry. :relationID is the ID of the relation row in the relations table. This is available in the GET /entries/:id API for all relations of an entry.","title":"PUT /api/entries/:id/relations/:relationID"},{"location":"api/relations/#request_1","text":"curl -u username:password 'http://localhost:9000/api/entries/1/relations/:relationID' -X PUT \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"types\": [\"noun\"], \"tags\": [\"my-tag\"], \"notes\": \"Optional notes\", \"weight\": 2, \"status\": \"enabled\" } EOF Response { \"data\" : true }","title":"Request"},{"location":"api/relations/#params_1","text":"Param Type types []string One or more parts-of-speech types that describe the definition's (toID) relationship with the main entry. Example noun\\|verb . tags []string Optional tags describing the relationship (definition). notes string Optional notes describing the relationship (definition). weight int Optional numerical weight to order the definition. If left empty, the definition is added to the end of any existing definitions. status string enabled = Visible in public search and APIs. pending = Pending moderation in the admin UI. disabled = Hidden from public search and APIs.","title":"Params"},{"location":"api/relations/#put-apientriesidrelationsweghts","text":"Re-order the relations (definition entries) of a main entry","title":"PUT /api/entries/:id/relations/weghts"},{"location":"api/relations/#request_2","text":"curl -u username:password 'http://localhost:9000/api/entries/1/relations/weights' -X PUT \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-raw '[3, 4, 5]' Response { \"data\" : true }","title":"Request"},{"location":"api/relations/#params_2","text":"Raw list of relation IDs in the desired order.","title":"Params"},{"location":"api/relations/#delete-apientriesfromidrelationstoid","text":"Delete a relation between two entries. This removes the :toID as a definition from the :fromID main entry.","title":"DELETE /api/entries/:fromID/relations/:toID"},{"location":"api/relations/#request_3","text":"curl -u username:password 'http://localhost:9000/api/entries/1/relations/3' -X DELETE Response { \"data\" : true }","title":"Request"},{"location":"api/search/","text":"Search \u00b6 GET /api/dictionary/:fromLang/:toLang/:searchWords \u00b6 Search the dictionary and retrieve paginated results. :searchQuery should be URL encoded. Request \u00b6 curl http://localhost:9000/api/dictionary/english/english/apple Response { \"data\" : { \"entries\" : [ { \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"relations\" : [ { \"guid\" : \"61f76f4d-ee87-4efc-b2b2-845125585bcf\" , \"weight\" : 0 , \"initial\" : \"R\" , \"lang\" : \"english\" , \"content\" : \"round, red or yellow, edible fruit of a small tree\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 0 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"guid\" : \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\" , \"weight\" : 1 , \"initial\" : \"T\" , \"lang\" : \"english\" , \"content\" : \"the tree, cultivated in most temperate regions.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 1 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"guid\" : \"653fc521-f917-4049-99fc-5281b3e2e300\" , \"weight\" : 2 , \"initial\" : \"I\" , \"lang\" : \"italian\" , \"content\" : \"il pomo.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 2 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } } ], \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } ], \"page\" : 1 , \"per_page\" : 10 , \"total_pages\" : 0 , \"total\" : 1 } } Query params \u00b6 Param Type type string Filter results by the given type. eg: noun . tag string Filter results by the given tag. eg: my-tag . per_page int Number of results to return per page (query) page int Page number for paginated results.","title":"Search"},{"location":"api/search/#search","text":"","title":"Search"},{"location":"api/search/#get-apidictionaryfromlangtolangsearchwords","text":"Search the dictionary and retrieve paginated results. :searchQuery should be URL encoded.","title":"GET /api/dictionary/:fromLang/:toLang/:searchWords"},{"location":"api/search/#request","text":"curl http://localhost:9000/api/dictionary/english/english/apple Response { \"data\" : { \"entries\" : [ { \"guid\" : \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\" , \"weight\" : 0 , \"initial\" : \"A\" , \"lang\" : \"english\" , \"content\" : \"Apple\" , \"tokens\" : \"\" , \"tags\" : [ \"optional-tag1\" , \"tag2\" ], \"phones\" : [ \"\u02c8\u00e6p.\u0259l\" , \"aapl\" ], \"notes\" : \"Optional note\" , \"status\" : \"enabled\" , \"relations\" : [ { \"guid\" : \"61f76f4d-ee87-4efc-b2b2-845125585bcf\" , \"weight\" : 0 , \"initial\" : \"R\" , \"lang\" : \"english\" , \"content\" : \"round, red or yellow, edible fruit of a small tree\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 0 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"guid\" : \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\" , \"weight\" : 1 , \"initial\" : \"T\" , \"lang\" : \"english\" , \"content\" : \"the tree, cultivated in most temperate regions.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 1 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } }, { \"guid\" : \"653fc521-f917-4049-99fc-5281b3e2e300\" , \"weight\" : 2 , \"initial\" : \"I\" , \"lang\" : \"italian\" , \"content\" : \"il pomo.\" , \"tokens\" : \"\" , \"tags\" : [], \"phones\" : [ \"\" ], \"notes\" : \"\" , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.842429Z\" , \"updated_at\" : \"2022-06-26T08:33:34.842429Z\" , \"relation\" : { \"types\" : [ \"noun\" ], \"tags\" : [ \"\" ], \"notes\" : \"\" , \"weight\" : 2 , \"status\" : \"enabled\" , \"created_at\" : \"2022-06-26T08:33:34.844822Z\" , \"updated_at\" : \"2022-06-26T08:33:34.844822Z\" } } ], \"created_at\" : \"2022-06-26T08:33:34.83976Z\" , \"updated_at\" : \"2022-06-26T08:33:34.83976Z\" } ], \"page\" : 1 , \"per_page\" : 10 , \"total_pages\" : 0 , \"total\" : 1 } }","title":"Request"},{"location":"api/search/#query-params","text":"Param Type type string Filter results by the given type. eg: noun . tag string Filter results by the given tag. eg: my-tag . per_page int Number of results to return per page (query) page int Page number for paginated results.","title":"Query params"},{"location":"api/submissions/","text":"Public submissions \u00b6 The submissions API is available unauthenticated, publicly, to accept new submissions from the public. These submissions go sit in the admin moderation queue for approva. Public submissions can be enabled or disabled in the config. POST /api/submissions \u00b6 Accept a public entry + definition submission and add to the admin moderation queue. Entries created via this have pending status in the entries table. Request \u00b6 curl -u username:password 'http://localhost:9000/api/submissions' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"entry_lang\": \"english\", \"entry_content\": \"Apple\", \"entry_phones\": [\"aapl\"], \"entry_notes\": \"Optional notes\", \"relation_lang\": \"italian\", \"relation_content\": \"il pomo\" \"relation_type\": \"noun\" } EOF Response { \"data\" : true } Params \u00b6 Param Type entry_content string The main entry content (word or phrase). entry_lang string Language of the main entry as defined in the config. entry_phones string Optional phonetic notations representing the pronunciations of the main entry. entry_notes string Optional notes describing the main entry. relation_content string The definition content (word or phrase). relation_lang string Language of the definition entry as defined in the config. relation_notes string Optional notes describing the definition entry. POST /api/comments \u00b6 Accept a public comment or suggestion on a relation (definition). The comment shows up in the admin moderation queue where the admin can choose to make a change based on the comment or discard it. Request \u00b6 curl -u username:password 'http://localhost:9000/api/submissions/comments' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"from_guid\": \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\", \"to_guid\": \"61f76f4d-ee87-4efc-b2b2-845125585bcf\", \"comments\": \"This definition seems to be incorrect.\" } EOF Response { \"data\" : true } Params \u00b6 Param Type from_guid string The guid of the main entry. Numerical IDs are not exposed in the public. to_guid string The guid of the definition entry. Numerical IDs are not exposed in the public. comments string Comments.","title":"Submissions"},{"location":"api/submissions/#public-submissions","text":"The submissions API is available unauthenticated, publicly, to accept new submissions from the public. These submissions go sit in the admin moderation queue for approva. Public submissions can be enabled or disabled in the config.","title":"Public submissions"},{"location":"api/submissions/#post-apisubmissions","text":"Accept a public entry + definition submission and add to the admin moderation queue. Entries created via this have pending status in the entries table.","title":"POST /api/submissions"},{"location":"api/submissions/#request","text":"curl -u username:password 'http://localhost:9000/api/submissions' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"entry_lang\": \"english\", \"entry_content\": \"Apple\", \"entry_phones\": [\"aapl\"], \"entry_notes\": \"Optional notes\", \"relation_lang\": \"italian\", \"relation_content\": \"il pomo\" \"relation_type\": \"noun\" } EOF Response { \"data\" : true }","title":"Request"},{"location":"api/submissions/#params","text":"Param Type entry_content string The main entry content (word or phrase). entry_lang string Language of the main entry as defined in the config. entry_phones string Optional phonetic notations representing the pronunciations of the main entry. entry_notes string Optional notes describing the main entry. relation_content string The definition content (word or phrase). relation_lang string Language of the definition entry as defined in the config. relation_notes string Optional notes describing the definition entry.","title":"Params"},{"location":"api/submissions/#post-apicomments","text":"Accept a public comment or suggestion on a relation (definition). The comment shows up in the admin moderation queue where the admin can choose to make a change based on the comment or discard it.","title":"POST /api/comments"},{"location":"api/submissions/#request_1","text":"curl -u username:password 'http://localhost:9000/api/submissions/comments' -X POST \\ -H 'Content-Type: application/json; charset=utf-8' \\ --data-binary @- << EOF { \"from_guid\": \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\", \"to_guid\": \"61f76f4d-ee87-4efc-b2b2-845125585bcf\", \"comments\": \"This definition seems to be incorrect.\" } EOF Response { \"data\" : true }","title":"Request"},{"location":"api/submissions/#params_1","text":"Param Type from_guid string The guid of the main entry. Numerical IDs are not exposed in the public. to_guid string The guid of the definition entry. Numerical IDs are not exposed in the public. comments string Comments.","title":"Params"}]}